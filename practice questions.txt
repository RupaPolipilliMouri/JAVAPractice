
1. Take an array of 10 elements. Split it into middle and store the elements in two dfferent arrays. 

E.g.-

INITIAL array :

58    24    13    15    63    9    8    81    1    78 

After spliting :

58    24    13    15    63

9    8    81    1    78 


2. If the input array is [10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60], your program should be able to find that the subarray lies between the indexes 3 and 8. 

3. Write a program to check if elements of an array are same or not it read from front or back. 

4. Take 20 integer inputs from user and print the following:

number of positive numbers

number of negative numbers

number of odd numbers

number of even numbers

number of 0s. 

5.Take 10 integer inputs from user and store them in an array. Now, copy all the elements in an another array but in reverse order. 

6.Consider an integer array, the number of elements in which is determined by the user. The elements are also taken as input from the user. Write a program to find those pair of elements that has the maximum and minimum difference among all element pairs.

maximum difference = highest-lowest

minimum difference = second lowest - lowest 

7. Take an array of length n where all the numbers are nonnegative and unique. Find the element in the array possessing the highest value. Split the element into two parts where first part contains the next highest value in the array and second part hold the required additive entity to get the highest value. Print the array where the highest value get splitted into those two parts.

Sample input: 4 8 6 3 2

Sample output: 4 6 2 6 3 2 


8.Write a program to shift every element of an array to circularly right. E.g.-

INPUT : 1 2 3 4 5

OUTPUT : 5 1 2 3 4 


9.Sorting refers to arranging data in a particular format. Sort an array of integers in ascending order. One of the algorithm is selection sort. Use below explanation of selection sort to do this.

INITIAL ARRAY :

2    3    1    45    15

First iteration : Compare every element after first element with first element and if it is larger then swap. In first iteration, 2 is larger than 1. So, swap it.

1    3    2    45    15

Second iteration : Compare every element after second element with second element and if it is larger then swap. In second iteration, 3 is larger than 2. So, swap it.

1    2    3    45    15

Third iteration : Nothing will swap as 3 is smaller than every element after it.

1    2    3    45    15

Fourth iteration : Compare every element after fourth element with fourth element and if it is larger then swap. In fourth iteration, 45 is larger than 15. So, swap it.

1    2    3    15    45 

